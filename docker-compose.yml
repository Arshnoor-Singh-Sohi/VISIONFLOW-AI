version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: visionflow_postgres
    environment:
      POSTGRES_DB: visionflow
      POSTGRES_USER: visionflow_user
      POSTGRES_PASSWORD: visionflow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - visionflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U visionflow_user -d visionflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Task Queue
  redis:
    image: redis:7-alpine
    container_name: visionflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - visionflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SAM Segmentation Service
  sam-service:
    build:
      context: ./sam-service
      dockerfile: Dockerfile
    container_name: visionflow_sam
    environment:
      - MODEL_PATH=/app/models/sam_vit_h_4b8939.pth
      - DEVICE=cpu  # Change to 'cuda' if GPU available
    volumes:
      - ./data/models:/app/models
      - ./data/images:/app/images
      - ./data/segments:/app/segments
    ports:
      - "8001:8000"
    networks:
      - visionflow_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: visionflow_backend
    environment:
      - DATABASE_URL=postgresql://visionflow_user:visionflow_password@postgres:5432/visionflow
      - REDIS_URL=redis://redis:6379/0
      - SAM_SERVICE_URL=http://sam-service:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./data:/app/data
      - ./data/logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - visionflow_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      sam-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: visionflow_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:3000"
    networks:
      - visionflow_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Task Scheduler Service
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    container_name: visionflow_scheduler
    environment:
      - DATABASE_URL=postgresql://visionflow_user:visionflow_password@postgres:5432/visionflow
      - BACKEND_URL=http://backend:8000
      - SCHEDULE_TIME=09:00  # Daily processing time (UTC)
    volumes:
      - ./data:/app/data
      - ./scheduler/cron_logs:/app/logs
    networks:
      - visionflow_network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: visionflow_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/ssl/certs
    networks:
      - visionflow_network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  visionflow_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16